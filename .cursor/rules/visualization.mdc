---
description: 
globs: *.tsx
alwaysApply: false
---
# Data Visualization Components

- **Library Selection**
  - **Use react-native-gifted-charts for all chart components**
    - The project uses react-native-gifted-charts (not Victory Native)
    - All chart-related components should use this library for consistency
    - Required dependencies: `react-native-gifted-charts` and `react-native-svg`
    - Example:
    ```typescript
    import { LineChart as GiftedLineChart } from 'react-native-gifted-charts';
    ```

- **Component Structure**
  - **Atomic Design Pattern**
    - `src/components/atoms/visualization/`: Basic visualization components
      - `ChartContainer`: Base wrapper for all chart types
      - `LineChart`: For time series and trend visualization
      - `BarChart`: For categorical comparisons
      - `PieChart`: For part-to-whole relationships
      - `ProgressCircle`: For percentage/completion visualization
      - `ProgressBar`: For horizontal progress indicators
      - `GaugeChart`: For gauge-style visualizations
      - `UpcomingPaymentsList`: For listing upcoming payment data
    - `src/components/molecules/visualization/`: Complex visualization components
      - `BasicInsights`: Combined visualization of basic financial insights
      - `MonthlyTrendChart`: Multi-month trend analysis
      - `SubscriptionCountChart`: Subscription quantity visualization
      - `CategoryDistributionChart`: Category distribution analysis
      - `UpcomingPaymentsSection`: Comprehensive payments view

- **Theme Integration**
  - **All visualization components must use the app's theme context**
    - Import the theme using: `import { useTheme } from '../../../contexts/ThemeContext';`
    - Use theme colors for chart elements (bars, lines, etc.)
    - Support both light and dark themes
    - Example:
    ```typescript
    const { theme } = useTheme();
    const { colors } = theme;
    
    // Apply theme colors to chart elements
    const lineColor = color || colors.primary;
    ```

- **Accessibility Requirements**
  - **All charts must have proper accessibility attributes**
    - Include appropriate labels and ARIA roles
    - Ensure content is readable by screen readers
    - Provide alternative text descriptions for complex visualizations
    - Consider color blindness by using distinguishable patterns

- **Performance Considerations**
  - **Charts should be optimized for performance**
    - Use `useMemo` for computed properties and data transformations
    - Keep re-renders to a minimum
    - Apply lazy loading for complex charts
    - Consider using `React.memo` for pure chart components
    - Be careful with large datasets
      - For large datasets, implement pagination or data aggregation
      - Consider windowing techniques for long lists of data points

- **Responsive Design**
  - **All charts must be responsive**
    - Support different screen sizes and orientations
    - Use relative dimensions when possible
    - Consider accessibility in small screens
    - Test on various device sizes
    - Implement graceful fallbacks for extreme screen sizes

- **Data Format Standards**
  - **LineChart and BarChart data format**
    ```typescript
    // For basic line and bar charts
    interface DataPoint {
      value: number;
      label: string;
      frontColor?: string; // Optional custom color
      dataPointLabelComponent?: () => React.ReactNode; // Custom label component
    }
    ```
  - **PieChart data format**
    ```typescript
    interface PieDataItem {
      value: number;
      text: string;
      color?: string;
      focused?: boolean;
    }
    ```
  - **Data Transformation**
    - Use utility functions for consistent data transformation
    - Format dates consistently across all charts
    - Always validate incoming data before rendering

- **Examples and Usage**
  ```typescript
  // Basic line chart
  import { LineChart } from '../components/atoms/visualization';
  
  const MyComponent = () => {
    const data = [
      { value: 15, label: 'Jan' },
      { value: 36, label: 'Feb' },
      { value: 22, label: 'Mar' },
    ];
    
    return (
      <LineChart
        data={data}
        title="Monthly Sales"
        subtitle="Q1 2023"
        height={250}
        areaChart={true}
        curved={true}
      />
    );
  };
  
  // Progress indicator
  import { ProgressCircle } from '../components/atoms/visualization';
  
  const ProgressComponent = () => {
    return (
      <ProgressCircle
        value={75}
        size={120}
        thickness={10}
        showValue={true}
      />
    );
  };
  
  // Category distribution chart
  import { CategoryDistributionChart } from '../components/molecules/visualization';
  
  const AnalyticsComponent = () => {
    const categories = [
      { name: 'Entertainment', value: 250, color: '#FF5733' },
      { name: 'Utilities', value: 150, color: '#33FF57' },
      { name: 'Subscriptions', value: 350, color: '#3357FF' },
    ];
    
    return (
      <CategoryDistributionChart
        data={categories}
        title="Monthly Expenses by Category"
        height={300}
      />
    );
  };
  ```

- **Extension Guidelines**
  - When creating new visualization components:
    - Extend from ChartContainer for consistency
    - Follow the established prop pattern
    - Support theme integration
    - Include thorough JSDoc comments
    - Consider performance for large datasets
    - Add export to the appropriate `index.ts` file
    - Create atoms first, then compose molecules
    - Document the component in this rule file
